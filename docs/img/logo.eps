%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.2 (Build 16C67) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 456 64
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 456 64
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: ZQAFEO+Infini-Regular
%!FontType1-1.0: ZQAFEO+Infini-Regular 1.3%%CreationDate: 1/8/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (1.3) readonly def/FullName (Infini Regular) readonly def/FamilyName (Infini) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -145 def/UnderlineThickness 70 defend readonly def/FontName /ZQAFEO+Infini-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /E putdup 34 /s putdup 35 /e putdup 36 /n putdup 37 /t putdup 38 /i putdup 39 /a putdup 40 /l putdup 41 /space putdup 42 /L putdup 43 /r putdup 44 /u putdup 45 /o putdup 46 /f putdup 47 /W putdup 48 /C putreadonly def/FontBBox {-49 -276 2509 1120} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF6DDB462BE1653323C3097279DEDA981BBF4FC96529952EBCEA105D72588E7987EA0424362802AC7E30FE67C44CB31137E6D97E808E235D4CEE9F26400C642E61547C9F9822A2E34D94E71EF80730745A576B79A0CB1643527FAA9EADCEEA73B477D73880F0013DEF49337FEA48F53793D9A75CDB363B6198251DF853652114B3AD1C54091470C08F9406438388EC686B5029A75B3BDB8340397B64A03318D4860352E133AA18019BA37FABA23143C7BFE8EED50D9FF0A4D4481A5D18D7E81BF7A912347AB623BCFDD57BCD7FEA3E6A44A358AFF6C7C9A8B78F3D76EE301F146C9EC2E94C4FE2C2C8F267270931305CFC55DD7667A0A5B0A30206D6D4FBAC79DA53FF959EF8E55175876F698EB24D4A6DD47A32A1C96C8F603DA10E6CCA9BF77776354188C01FF1F6187F6EFAC86A2D3924C2A07F1CB2DA6DA2FA4B078FCF984B37A0999C22A65BC7920C5AB6A19D067AFF9F57E9BCABF753638F7E486CB0246A0EBB93B59195D6F1BE5D71A3C33443BA9761958E287A1A487847C06EF022D191966B0D2B2EB411478944BFB19062A92E0F676096B7C69BD7CDC59B6120B228A95BA17469EC628B7F976D761B47EC0510E00A59297488D40FF92C1CAC72EA7F663F58994DF2FBE675EBCF851233B6697DC7D2777671F11FAFFD8CFA45D26EC62D9367DA01612FF962710EA58E376575218356338FD4614925E6BAB666E4531A3906F5A6473A1F9E484DB090F35C84F8773692451CCFC8175C132008FE93652877278288E519B8A5E8DB773A265962223A9D306F860AA3BFE426BD546DB4D9F1BCB88D426D5F617DD965EB06914EDF05F48CF41EAAB2108B3C7BAAB00D1577363B9EDE08C8A875DC56799124EAE8719F4899B38021EA54B4B4DFDB236CE9EE514AC7CC4515010C128A7839CD75E81CCAD94866C8FE84AB6D615686C763C53DA420F80826DC82D64067BCBF802530EA829A4BBC681C2BC7EA00BAA55821616B2C62025F9CD394479BC50DBCA035CBE27E343131F2F20A852FB95390E4AA06D22F9BC04535AC19F0F5D14594772E877530E12FF85CEF8A93E6763F9929FFD9621DE22CBF425FDA2649C783D0ECC4F5B44FEE52795D43B5A751939A1DBCFFE9CFF491C643211D79B0C1C2B25B9AD54ACDB32658496A1A2608EECBB08916F3B3989EDBDF20513B1BE89E5EBE96E3995614CC5C2BD6E700A4C14145F6E8D4E98DB6B43D591D568978150757956776D3295BF622A07050F23A4AB1E7354B17178ABA64D82710A05B808F75155158211AF2917ADBF4D5939045FE1EA39DA5AD00A1DD039AAB46ACADBCCE6919BD0011016D802AEBC88240A6BA997C87BBC7B5CCF487595AC0F2DC7502BFA1CB0B7F17458ACBEE03A0BFE6C8355A4A6FF49ABBA42DFB2C0BF11F01EF9539DDB1B018C6708A975FB1A425A826D45AD3E5C4C5D5FE3DBF65A1E64B188119C1129B1907CE8F5AC2843E30276618E0E764F39CEB5483EE6367941C0939534744E7037DC2E15B28979DFB2CC7503269852AF0FACF76598417498D3A59B8C62D794047A832AC352C2D5BBB03DE5DFCE92E37A04BEDAD4DF9ADCAF6DD2303BAEFD2169041F897A4F8FA3E723F66B74653AB62FAC450A186FEC5BEC009359117C65031E83D8D1C4C64354E0A35F6A03B2BA52031E925FFABD962ADF82270183DD3C6DB7594FBD383746AA81C8152AC2F0118EFFE8E0EE4651F3F3018F7F539566816378F65085E9C4BFCCEC21D651ED51C30CAAA52A3F38EFB99C55E88AE3D7C60DB614E82D63230AA635356F0D68C2988B8D16B46446BA79ED451250E4A012A248E04433F24A25980C4B2130DE87002ECAC5A5CA68E7E598FED203B2411E2F31038C9583F51C6B240F0D02AC25057CD42D709EAF79DB6E1C21DCBBBF3A76C344B7FDE06B495C535309F2C606B9392DCC7111B00CEBF0F5F81353E4699DA75552275845C61F608BFA3519AE7F2613DF0FEF485539D973D283C7AB7C0E8BA951089BD51B6D4192B9951CE2124CBC5B7A2FD5C091E1A2885C5E4231E8A511C3F191D88A515194396AA924E82B5F7BBBD1647E8FCAB75C37AB92B78EE8980E8AA76E4DD57E37F24686BC8746EA0B4BD93167F4069C982763FA60DDB0555171B38192E07FD25388FA5820A084ACDEE351B0969E4992F31BB4B79FCBBA58A9CFA9941EE2FA7BA190F1D8F3F58037A25C01085B8AEC2489F07B43E4C0EE5EAF297A21FBD8D589AC798506BA3C91744112A07F5873847063815AA68D7FB5346135B1998B33A14D72EFB1082062C978FEAC58BCA8AC6452A35BB2F78677F9FC63E5BB80FDF27937B209DAA866038BCA2E09E87881553F8D3CE65BD40EBA8EC5086FD0CC0523AC527CF64A7ED1EB94A730C4AD98BEDE30140415D8FD9727966E6E349E4281A1F735D85A7817277F2F43AEB02A639D4C86EA179C0282493A44457C1B5D8E54E8068CF034F1A5B7D89F628A6668E32AEA50B0C66F24494C69FD186F895E2CDBB230BF485405247E2EE7D970AD3BD947515DF70512C18816BB4A72F36D37420A88CDBEA7BE4B8AD36D276BC8D2C48F6CC213B5AC5D214213748256F370BA5CAFDDA5538BAEFB190D38F6E6FFC3B83820AF66E7BC8ECF31D878CFC89D941AF07EB9591862877809D3DFC65DF610235130FEAFDBBDE07E72D3C817A4BDE2FCE243082FED70438AAA31982341BA795BD219757EC672D0FF233394041EEB54161046AB81964B7B7648F6BE6236C540728DB0B49C60DCF73CA6EECFAD64E4A600B859CDD3F32BF71E487DAF50841914C69DD2105B891128B38316C9746A6D063B96AC742F1D6CB5DDF0136C01F59E5141D6A58A843A2BE31545A7017483320CD281750288ABEA830EFF79C400410C5A8783682357AF2DBEA42064282FB0DC9B2F090782882A53EAF8A43FF41827A25821F4717B5B6991E48EBD9CE5D8327D0631348BF2D7C4AB3B78FE99D4AF6D692AFF5B95B93245E1D002E75B54A68A4A2DEB58275C43F59CDF3EA5A90A21640788CE9357CD1B873C2F9EE2BE47ABCCF3FA042579D795FDF189748C54679C8099E3D9884C7C5FA62E3CA319E864C4F13571836FC4D92FD84CEA094ABEDD801237A4F941F7ADA16A2AEB579A78FA8C2E62B7AF07C7C4CAFB20F0A32AD347C1129805779CDB71E5419156C0AE10EA795EB2C4F2BEA1D65BD93E4453A7B165D699681541657BE0E579509B5DD16C7D6FA39042CA4A1D3F1491756A058ADD5BAC3806E30587E11DDACB94724CC1B9824B1CF82E7E386A2401F10F762AEFF6272BEBA5BB5E259010E86A6A1BA86FFA8FB280F9BE15B21DDDF09363650E5618B1FF305013461AAEE56461D7E32E7A1F4C29FE42D5410E58F9FEA5D9527640F42D71FF928D550FEA626A1E6ACC69BB8E85834C53230ACFCE6FFA63C23461F991E78CC5F0E549FA50EE6DFA6F4D0F2C7E7D7C4182F62AC26DE3CA08E317AA9A28427CBB664FF0B4C661BF5A23E5C7FF99F041704707BE2074A7783C922BE3930CCB8264EDD7DD671797FB38A47AC8B702ED6226AAB64F869527787E75D8C07AE011E90872770D9D3821FAF784B53EE1DAC9E660E7D9C41DE623379C492389187F26D65B2DABF3C2D8220A3D1ACA44A609E4C755763168C4F210F528DF635C7D23E2BB439B5CC08E5164C4517FDFB2CAA58E98F1EB637D9A551FE8F52EC96D0CB13CDF46CFD7FE27DF4E32142E6C0D65766F004B5E4ED8CFF25766E67AD0C5195C4DC9B07AD4DECDF48B63CA9A61F1380E84DAA3A66889C2C987AD10D66A4B9DF0D02E80348E4AD6A763DF0944B99DE1253B2267C150FA8D043332F7017C00026F75D70D924AA96A8089A4E347426835FBA86336890A77BEC1212187293483F617274B6F068B39C34FFC143249729694AD430179EB8D2E2ADA6482883D3D697D7F2D51F5D4D193BB8EBD0C1354AE9621E3136E50DD563E67983FBFBC0C3B2277661C2ABE069E7F83AD79B7D64A515AA0383FE5CC90592AB61B03E121803A9E2B897CFC50678E085A9FDCC71618BCC42B02B84714BFF0F440B8F24C1C25A00D75146DB8724F2E89B974E84CF2EAAD998E958C86F8F5ABDDC786B25D0811479B401E5B2695639C5782BA403EC670110D3B89C5AC00CBBCAA0B3B40F52C63E5356FDD2FC3930D70415E9E12C1EC191A465DAC2C449EC3D1C9FD3515C4F708730E00E8E7D37F86E7E25919CD5F68EC5D9CDBA2DC2761FCED1B07E998D579CE5621F4A2828F610C34A0E74C412B76CE7F263F55B61E6E716063261D8D3FB423A2AC4460F8C15EBF68D328DBB3206D208C9F842D7810E4F83CDA2E338505C93C032A308D916E98214AF09CE8F307CFD79640ACE9FE6F5312867FC22130DFF56AC2863141D5E6FB9E49586BBDD38F5C0E3090B22B0C514EAFE3313B7229BAC32B23E6C16E5BD975EDDD6110C69A04A1BDBC1A2CA433EE9B7723DF886D2AF9C8E76D6D6DFE947A01B94CBE60EA3D5C6D213D17DFE6E8717DB3EF4F08F4A31D2F80D224B0D7A68759C9DCB965E7E902DBABA7E9DC2098038E6261218BB0BA4A744048DFBD856C324FB6A8F6BEE996C5F86E64903BB6DCD1170A0957880328905BE95468808FAC3160FB52D032951C375D70740F9D25433A1408E5FE4CD13E3CDEC43F8B0DA87EA61CC0669B7CC35152B3E8A1E672439416CA16794957FD5B7EB7EE51EF25A3D11BF079F712986998B786ECA08DCBD59D7A8F901F3613B2F3BA0801CF99B09912A468CEC8196B5C4694FDB0723556E674A2B5B24CFE717353664DC77BAC6D8CC4391AAEE08EB18F6FB179CAC78CE1B0F3561743C8A4CF8F70E37DA8D86AF9E93E0958141A770C85DE871A2046711F9BE9B96AD9E4C254BC82A695D0F95E0D2F583D9B839B2CDBAF7F8C8033410FD8C9F523D931615E50384B8AA30A5E86C78B768E8209F7A4A827EC262FD60AB7578A886A5225B0ADAEE798C26CD593690EADA50194F57F1DFC53FFAA4CC7B12C934350A3A162B3F5917B74CB49174D4350F04666EAC1CA94DBB740D732C544D97D3A057CE440232AAC1A1E5FDDD599C428DE3B7B23F411109B6729DFDD55A774166C33FC8F14CC8A090C992100BCA90FDAA1DF29BA3DD44B82A936CF1F62B57E37228C1E18757E9104E4F6E63A1BD73D919F650997F6EFF5768731DD6E5C08546DE28444D41E1823D54001E605D1CB0F3DE782A5A188DF568F149166DA45F0EAD4016FBD6216E9D80FE4E04904FD1B7B0B420F64548DA0DB59C314065BB98FAC0FC373CAEF46CB2226DADF58BAE66667DF403709255B8ADB9D0920F4637224CF69882F0C6E331BF2EBE13B86375B4107FF9E754038485A466E9E3B663681833884ACE5B1E3A23696F7BAC9E94B250536CD13331E45BDF1351D8226C54326913CF13D0D48FC5037B6C93E175BF18A60CDDC565B89D5118B662105B8EF4FCF3E7B1C083707FF17F318A17E70104958C13C514833FF90D7E6A8FD7ACC720CF61B856F8E15CBA04EFFD8D4F6C5016CE8C72A83FBC31F0FEF6D0BAFBDE2D4ACB6E87396A2683EB6933937E40D74622BEE665319E4310A1A1392A6E2F54BF2B5B87A2ACC593E6DD531DB7A03F3CAEE640143066DB4CA75E5E762804ABE24266351D34037DFD96CF3A38C02AEA196A7731B6D64F33AFAF2A0E6E05434C0DDAE9D564B8304A745572B25D48CCDE0A07CACC1C4CC820519C44E097C00DDA6F66922DA1619AE5BED034609D1204FF06061E5F26132E8D27542125F7B5006EBA90F018BE5C7671AEBB35EEE29051A52418E15C30E9F5248409D7922E16E39FCEA0C2CA4B72809CA75EA2672733DFCC5468E75049644E486CE400CAA7F120DFF6599B647AC2BB9761427E91C3AD947740F8CEA14530F2DA474BF721D13617FC49157FADC1B9FD90DF7BF1E9F5BDA2761D02184A27223513ADE17ED57CE187D927032C0FA95B95F48065E5FE52CADFE2AAB7691FFB5B6446C38B961E68C38C9C0568FF9291DE16F65B3929BA1B8EE98FD048DDE8C5762DA1C0D22F4BD8875658CDFC9091C300494D17615E5143F9A135E104DFF52E57DAA670F86FD063B49A88B31A200D28005BE1416294EA483042061706131F1EB1660624C0A9952ACEAE8B7B31BBC3FFFB9C402784483392564799FA758C6698D3297408F2B4B9E3A7025624421FDF79F71EBA18C719E22D46EA55A4D399549C6F76309E460566879CC362CFE0B507351E312B3460B2E5D809AB72C754F2D5386DFE3087484133BD85BFC8CB84C850012BB7400496F351BC24C646CCCC3DD3F4E599B79125E90E2AE1C1E09D3E39C2F8190133491E70A3A63439C53FAC27F80974E10D4BFE456FE1C75514D886A5E5E48B1D091E6EE5CE2AE5EDF5A8849EBA7ADA370719F9862375CDCCC89EAE4716CDA95BE3116687C7A762E3FF14ECDC5BF494D717D54CBFE7E835BF32BD120CA2E627FC7B165A1907309E900E49681ABE66C9AB921A68352DF546034687FAF5E7CC222F21487F9A0CAEF999A5CBCFFA2DDE702900011AD11606134730A2853D96E3EC0EC35CBF7C1938F7D256A653A0754E365B060B491AA51431367A3B4052F0A17378C4D29E1A7947EDE3DF506BFECBDBAC8C4A3448E91B291CC2E1F4A9E5E1EE35EC2A0E0280DFA0209A15E4AB39C3E42350E9471B3BC6CD29062766E97D448EE22BDD3AF9C77C19EDC6C4E40CC79667ADC7F70C4D06C8CF87EBB9D3EC29E1E1E64E7585BEFDBEDD62CD72768061AD343372CDCC0E804B03A8F21227C1A9388C02448D6F1C9EF9D4A6BC2FE602AAF2A01583954F2DA4C9EB5282AA8900FEBEE62DC08EA0D3FDEF0A9AF985932C0F0EE2B705E2E063A065A8719197CE9EF2B3B51E76BF55AA71937BC1075472C1A82E7DABFD2B4952BE4F5159788056500ACE2F7B4122AFB6B6216F324FB637222DB6A19D3E4F7FB378129CE8CDD923873E4F9DE449D2E376CE5279AC911CB215EC2EC7D50CF8AEFD59EBFFA53A9FD291F8D69AB23319AECBBD7D1597C0BDA7BA4B6AC98ECFE2D9494D93954C8326A1649FB0A91948F62B9EB09400970B3BB3D745F1A3E431D464C4A1A74978F797F6D4F15CA186CF40BB99F1C544E87C6F8684919218E2155159414C2E0DEF52073DFFF39F12425548D9A272A1714C28B6615915C56D2186025D9EE39E59B9E58616E6B6431FF9AE52F73E8442EA1AD635C937F036EECE95DF03B6383D808527DA094F6CCEB3E1C4895D811D7D86402D8AEBE2A14C87BA2DF641A1879B96C3D79C847066A7B1B097714CA7BB8CB03DA121263E11870F893BC3483C86D3166D9F91B5E575CC5F0F2FE1786EB41394AC55A9DFEE8BD1DB102364188DC9FFD7A3EBDA0DB9DAC4B719BD26C937EE5F0427677BE92237B7B3DDDD78417E01437427CCED6882E0DE82230C914E75A659A5707CFEE44659D7AB9AB2FB907BBCE24A51A86FDADF0DF6C5999E67AF5CCFA4B0628C983FA79332C96566B500004C1CCF0A1CD3EB8DADB2E0A8B1F99835CF2B8E81A89321889F26B2347BFB30A66F8495B368038BB95574DEE4CF8C87716BE4877B7CDBC61339A20C70D5E5C170FDBD2BE0A3E0E359FD506AE0D94DCE099F0C25DA982D9E2E1AE4DCD58A987BB1940A25E8FAF6CE3797C48DF6ACF3FFE1C2D2635412F9162359B53BC675F9B2FEBD6A5C1EA684BE16A56121CC0C37F85E68C36FB6C4FE763D1322F26DFA8DF4A8E70C805B995BE94AE71A252268851107C99F6C47AC73EEEDC5C54760A93D0236574D5A6E6F0087FAF44D0A63484C139B00BF7A5F54E4E84FFBBA4C42BA31E0F3A3B1BAE48FB44DC9A6F97A4293AA23A790EFA6A89AF01B4A239EB534FFC1B97E57444BA0494B471E8D620B9FC1AD324FBE3526D0272FD1B8220A270790C6D6EBF95F208BC1F2BEC6D5C6333C19C91FF2BAC7E1E20250E3AAB8941EC63CC2E11CBA2FD94C653A970C636A3BB347CDA0C2EBA7F70E2545791AC6072A7B3B87B08A0FADCFF523F04DB3AE66697F55BBCFD4C3339367CDDBC4BE22B74FE346D1FD3D428751979C83F4BF9E33032613E97DE81543933051118A2B70EAB7A77F2D2A24C5ADCB9F57666F88B09BE44C284E47C3964576AA78D1D8A66BF6D0DD078449A4E479C21D6A7DA9DEBA9B2263CC803828BBF5898616A6238EE0EE5992F239691503AF542C2474ACF8D0AEB62E66F141597A126F83E3D0F88F009DF7A9F33ADAF782798D0302C9712A0414058791252A77AE7E6331F91CF4CFAFDFB66F8EDA0B9EB9AD42AF43469ADA709A20C53B51CB839DF0E5EAB1B03ECFD58691E056F7D9C5633FDF0A9FBA9F331A24401ADA306F5F9183395575258FC7AD27100F50F5A41A9A9272100885F79D098D9AC92DD04E6124BCC76CD97D41F2D73E6BB1E2080DEDDEEEE019645228A96D23664024450DF1A5E22EF762AC457F2658B16A4F4900CA7248387BD573DFC02D58C7BCB4FAD0CCB267C443EFC6CCA78DB0C094B48104E94E85E90F22215D8DDAEFFEC619C40F5DC7289438173F22F374013A1DB724C5BA0333E605DCFF9E202C0A0497FE0A27DD36469D948F2BF29202D797417FDBA929411AC0E66B82ED7C3CC78C6A226B071FDD50A8A81842F85FD0E67883996A13C1B8780EAADD1ACACB694773B69A22EE865C31FC884565AAD12E6D4E86A2440133AFEA52BEE7006163F27C1D39CFD36D5373B1CE3A79297CE44F46BBF24C5E15E637F5405BAB112A63262EF46F2BACCEE32CE27711109F6ED84C0E7ECB5DC5E545B0D0A6114E2CF4B333AD682139404D94A994A512DF647808DD83440CE8EC1F099A6D375FE232CD2DBE1C6F41EDC4480A569A7F2C2E139492DA948AB4A7AD082ED4F39088D6B5A1D583C2DB19383167F8AC198E807A0689CC40908B3789C1742B703A35A9EF105E433BD58BD857DD65CE9BB5BBCE725149612661C5A1E70076BAC62F7FCE997679F22B4F2F095A88F6D82637ED150DEAA63151B9C0062E4998138B0D273E456187C78AFA3B77D9B8052241146B2E02CFE8ED25A7255E6D0992C0700FB4D4D1594F2F517CBB22F5B3E04E0952406615CC92B3A36DA8CB5E590F93B00929E44FB96FC96A3CDB7286393571D69B39567309EB170CA3B0B7071037A222869A2C294FF68870D3E2351DE0AEAF7B3323004A1DEBF96D7E388CA49EDA6F1E535F09F3F394597731BB122C0DD2A4F37DDA041ED58AB785235E5C3EF9C9D975728F5E6BAFF3BC772E7BEE146400B1866D7A52B5AF7321F7E226FE3D7C60F610325E51FAC736C1D22F1CE7577984CF13599BCCF526A0C4DF0F320DC70DA7149F33B6E0D8027F9136A5F0C1F25BE0CE85A8B9F33EA3B948267A0708A5086D70A7CA18F64BD77D8248D91C82561EA26A96E92653032C7FBF512FC453BEE0AD1DCC92B8E73A894C67F7E132BBFE001BD0EAB3607749DB316E955631DB6480CE24C91A0EBC22A297064E23FC78BBA2832DA5E99E5F87CB680A349AEABF768F7A9099B5D79122281A49AC3AD22684EA31084110E10D9F86E299A4B24F35A51F22856055815F3C16311FCF009249F7F5C0A9AF6087B2D4AC87A46D961374634B12A4BDC1C8E833686E1243E33B6476C33437C81643813775467D1A10B966D48FAA0D8DFBDEC88EF0387D832E2D91A45DB6D1036B01C15D6C00005002C4E3FBAD86BA09AF4C8F00A0D9B6AA643783A527908DCCD6F875C921B7AC7D37B6562CE26D45C12AA883F1765A544FC84EA2A725111F7B10306100A2392ED128032E8E400E8C04A43E1E7FEDF8D21976C3865766903227065BBCD19E1DCA1B2A17802F35C2DC5743CC32D83AE52148A62BD6D918DB6ECA14B18EFA94DE392FBBEFE742C73CD6F98A4C6128164F916E33FE775B3BB59ADE4F7C43A4A9FD05219B840C2066BAB36C9D91840964AA44CE17B762BAADC459A7EAA9AAEFA5046A67A76E512C6C286A2483BB797704E41BC689588B06D1F830AFBF34CB76952D405223A179CDFF2854931B89431822A47B5069F75276C6CC6F8C348646A43311A7C126622E5DF32488D596780DF61874CB5C2BC3940983A81B3FDDA905985FD1C55B135057A49DEC3DA448C1CA8A23D653C0B0C0C13AEFCB8875C533DBA7F3E032752C91A29DDBB1FDDC8B1746CAF8463D166D90A14A56E73CC3D01E76C927A937BE99615F2B458FA2A4A18D74B1875079CBA5C97294957AE62C3232ADB09BDE3B6CE88FA748B54471CC34781F6CCD5A3EB7926F0A1CDD7ED9AAF56398E18E3D836427F99BADA6EC0997DF4390357E48504B19BEE187CCAA700BA188D5800B26B08B7827316621AAE4C01B36EC156B72330F119E05EC1FC186619301272D7A49E487569A43E51B7E76AB7697613270D5CD2A7A659C822B7A93CA7C1CF5C88784FAED4403C42693CEDA715F5EB63AE7EAA76FF2D3F6438CA35618DBD7EF0551F487C42E2AC76DBAC6179834465FED72A61EE90DFFAD95D3213F94D4B90027C624B2903CE9B224A0B530B315E23367A49FAAAE3334EEB26D04250FC67D2B392C7CA7990603E40E67622B97F3B57ECDE89766AC03EFC8575AF5D70FD9C75F342BC4FA62D0F0B047585E5DDBA3004422D02DECBD30B528B5B46543A7513456CE6C5A09454F5FD7FF4D6243CC9350D460BD973234722AA97E4CDED900CDC71E52815864DCA5353F776CEA826A4C1807C654C2734FD8B9C9344B7297FCF3ED965CF4494DEB6093813A41BC95861A6D872DB6CDBF6D8BF75F1BE957150175A104F0DA269A2A2EAEF86506E00056C14CAAC51B9CA7D1E4AD5D0447045AF93B5299138F088FDFC840834E4C6403F758CB7737600D24F499F31D45FF1BB1A406E3F5BDE31AD94A40B11CFADB1CCFC5C229004103499288CA9AE7B36794B7B48445987BDE0071AD5707F5AFCEF3A103BC8E0B82064A0476D8A7415A645407CB36B81C939D02E83F8B4B49AD1C6BB4ACA1049EE3C5B3D19205BA75CD5FC9F50EE0830BCC26E36F7186BB4F8E7060F7A95D6F7E94B91109278634E33D5E9D18A744AF8E6FD9305C046E2C52BDE702218E2B100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/ZQAFEO+Infini-Regular cguidfix
/F1.1/ZQAFEO+Infini-Regular renmfont
%RBIBeginFontSubset: BFLYXW+ReginaBlack-Solid
%!FontType1-1.0: BFLYXW+ReginaBlack-Solid 1.0000.1.0000
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin/FontName /BFLYXW+ReginaBlack-Solid def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /T put
dup 34 /H put
dup 35 /E put
dup 36 /space put
dup 37 /G put
dup 38 /R put
dup 39 /A put
dup 40 /B put
dup 41 /O put
dup 42 /K put
dup 43 /S put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -583 1 index div -521 2 index div 5057 3 index div 1170 5 -1 roll div]cvx def
/sfnts [<





00>] def
/CharStrings 13 dict dup begin
/.notdef 0 def
/A 1 def
/B 2 def
/E 3 def
/G 4 def
/H 5 def
/K 6 def
/O 7 def
/R 8 def
/S 9 def
/T 10 def
/space 11 def
/NULL 12 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-583 -521 5057 1170}def
/UniqueID 4012279 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B71CCBEC8DADBFCB2CF6F614DCF0404E4678133CDA654CD39ADC4A8AB02D1F63DF508CF3A058F658ECF52ACB156540D6BB3B3C05E39AB5F09C604FD062E7645DFEDF37FE8CEF0639C3CA7A2E41867D2CD507379E0070BAAB34E862103D938C9EE085BC04A278A22DEBC144A994E5496196442E59201835EF8DFD66BABAC196A48C8007AE9855D0BEF6F9FD69708FF23C6443CBE91AA78470B788802D28F84B12A3B7D604B872C2D8569C15FA74D22AEFFC55527410E3FD22E1FA9306BB3F50FFC2A1C39839EAD2D219B17C67B80118487587F6E54883D934E0C13CECD575366B9A4856212F46FA2836FAB5718DD476138041E67BFF5B4DEECA953CADE14D5B9AD0AED856350D5FC05C4466049880D010E1A6EA8610A7CEE82CB3935C980EC39EB8FD2C1BFFB75A5CC8BD6CFE2E40380570E52120A3C0C10025A41C30AA56282463D0FC9560F8C9D8E36A524FAB1985767E53CFED3B752AC038FE8353EF9EAAAFCF9EBD65E754FD825360F18D1F3B3ED88630868D6CAB1EFAAF5BC87D33AACE5099EDE900F1C5055175E3C5E81942685AD2C11BC02182637C44CBAE15DBC7AC1AAA96830380A9518F9BD59743FB40B5C61DB50E673D9D7DDA6A5661A52B6293EA7795B058733744B464C3113FE7C239B416117C1A7ACA232EB071FC6292E251E36EB2AA08FC42927EE104CB4A4ED961F4CDA857383F96343E7C79ED16117D053170FDAA38D31C5A4B713FA26236AEC360B4F32E7954279D97CFFC7FA2C85AAA64
20FAD7C33B343ED561137D6A2A252256403DE20D0DA6B03EC2C8F61698B9F14BE61EBE012BA92AC1805F34561E4B1AD254DE1BE9C1D8405BA800CC22A7E9EE9749D5CB8C243DC1B01B8B17CC85E3FA7B9854E8E8B4ACC692F40A231E6BB4F01A6696719E0D18049AD26AFC9A726A42F14C15050BC9F0FC3B7B3F69B2AE7CB96ADBE837B840322E22C59C5FE43E2E6613B8DCE2304A567F3FD2D3BD7FA4C9A4ACEEE1C1D10A31B688EBC20F42B7977FDF954ED38FA00310ACC55414EBC78E5EFBF651CBC6BAFDBB064C6953FB1D0734E905EF108631A51EDD5A952B7494265CBAA0E8401FB888B2997FA1BA3FB15123746A1941AF994C17DE53FC1175BBFC49F29A5355FDC27F4BFD8EE1EDC4192780E7F6DD885DFDA4467441960649571D9A6F5B72C4E8ADAA4085A30BFC7262B8D8423A09101819A20D2E416F651DDC8CC5AD533D63C487FD393E36FB96845D4C85EC71BCBED68A1F974B71D6A4C250A23DCB46222914C53BFAED9AEAE66C903CBF042E8BC324BD17B480A30FDA639975D8D9A8993BEDD447E7EBC97CC0F7BE4F1371ECDF06DDC76F5C34639FDC0B938DA081065A99D1CA539A09837149A593FF09090BA09A4A9DE595937846F028DB78F9B3B78352DB2086F17DE40B7DC69FA6062465D7BDE3B153E3E4CB8432A9AA9E67D48B530919269F90CD9771FF9B1A51A61D81673A8E2DEACA48CF1910A48C2B0FB37A65144A66D91195D4F69AC643FF202D656AEBA8908698A14D0846D6A4043432F6FBA5946EBA301D3CA03F1BACDBFD306E9EF78C6EB39268815D3231C7129CB5F674E42063377BB56668E17586467B0F1A009C4C5505CE4932B3E9C7665AEA2E966DE0719CA7606542411426AD8C7FEEF94054ACAB14E650C53369F5CC354C8C196F7C4FE0F3074407DF1587E6B27806657EC4AFB946889588D1415A9D225A4276313B2FA6A124EC77A5C0BC9801FE7891A47E18473E69B43BE7E79A7F3C6BAAB37091E95AA90CE878A810D2B55EB12280FE79AD8D90D793695D69CBBAA1E81D48FC64720C6B38D440BA9B079BF9583491CD39346FF751360512EB82125637D37CC2EEC5C2EAD7C6211FF534D5663AA339BDEEE67FCB78D88443505CDC9B11BA18A18E1027C5A6EF9187C0240F2924E6FF599F6BD165B9AE2F8B0BE20745920239DB0D13E269A71A6C504CB978CAB7421B3ACAC6F57103BC78FA99DA532B087F548C6AB9FDE5A6DAB027F6850449A8D1129C5C86E6FADF21A21D22D01742BF5BBFDE776E0367995BA8D38EC501910F41F46115A3DEC8828D66078645986181CE46E067F92DE6BA63F5D29347919F6A66CBE78CAD6C8D966BE012493D825FAB7DFAA7CC41EAB3AE6DD94FDFC77FC98FD04D047FB6C2654624BFAE8521FE4CB68051483CC3D25CDEC5FC6CA1E4543A00488DFCAF523969DD1BDEABE90975CCEF6C
7EEAD82D685B345FAB48248EDEABBC846043017DA1101965735793FB5FADC4CE55677D0B05011C9D79A8F0059D87165CE13D08FF5533C418913694F6E2AFF86F5D83481C008FD26E37935053FF194B4AE10C274A2AB6279A195C836EA5BE37AB212AB5E97554D997412DCC8DF3711722B227CFD857D5D4AECC21F49AEE40E5ECBB122B1044CDE60B448DCA5FC1A222F2B5DE840F63945CA54296E134EAEBE2A6782F6CDFA13D44D0185EE69A20209EEED3BF26B1F670F4453CE971BF8B8BCB3AD82A1A91FF06EA150D0F49B293ECDFBAC4B69A0C5AB383774AC4F9FED448DCEADEB01C530E7C4309BA8665F1993E7178AA79E42AECA6A73C0D2B28D1A44AF639B645D0872A131E02266BBF55A01822DC6833B2BB3D36629597CE351622403971B4C23DAC8FA47A79CF46695A6ACDC430CC79351CD25BC04C9BF782B37C21560487266A0FA54BDAF964934B5813F922A9DAFB1418BDC26BE3497F772618911C5F63B7BD27AEF2DB5595D632C7A68A881D426EFB76DCEA31D3DBDAED3A58485FEE456DD9A72BCEBD357772E12601C75538D571982A632CE737217980EE54229513B6A7307FFA075D3E21FF82FF8CCD83ADC276562DF6EB9F547427809E4E21AA2CB6DB5FD3A892410D48A93E3CED2E00F5B811FC409B42645ED6C41A483A277C7889FF0F7D4F515E038D70ADEB3D5549F3979E361140B6FDF827EFC6F059275E57FA93E880E91ED26D69E05ED176DFB7629BD6EF7562F485F0DD659A291DB3C551F03ACD21F22BA1AF4035469B7DDEE5A5873DFE852C96F62347153FCF06EF02276BED2E3F0A0DF7B58A8564AC8FF4098BF5527EE5121CED7B28A93B4618F11721F8D3504F709780739CF7A9079AD4E6111BA7BB114E334B8B45DB57711D39063900D44878E8F446E056D051C6708AA58F9C946672249AA53ED2EDD15AA55F4BB0A211BB4778CEE986FF24FD3F0EC2BA975790565777D77F7CAE527EA179805FAB5E11C1C48AF31FD44CBF5D0791F3D47D54E5CFA055194794D39EDAF9BF21AF677756248BD07D71F6D21D55674A0B4A1E3076D62BEF3F088BD8ED08F338BAEACD279B9FA531917EEA8BBAB8DFBC75919D16EF4646CE80500E1EC08214A1644B573C76D8019782E243B93DC5E3193653CED00F1D4260F7BBC6FFF984F052283978D6D4492DBF25BFA4FBCD1D09007C4B40BADF6A560F016BFCF4C85409EE6B1AF739E30D58F77FCADEE93C108D09D50E2A61ADBD973148D5AA5CF5357EB9FF53C4A9F6A12D380505A9C340D3C718A1D703591280ED2306A7791EE25A837F398E3E35B7C291C6251A7154930BA9D070DD07EBA9999CFCA6297D7A06B608B8E1B1696BFD0BBC7E1B05EF2B5AC348370A1CE5A16D3B3DF02592BE62397B462EACA2E2F297AC7C2EFB93C9CF55B7E282F6EF3E41EAA9FF3C0A2876FF0EC08DDEE5018B
93A5822711606D8B46BD722B5B56E2B54B3108360CF212D55A7A987944249F098BB9554CE6C7203B86545E9FDAAF5B7F8EE3E452A76A27DC95C2B874F8AEFB3820376E713A0463AF112DFA037F687842C8F5288166DED6F3DEBC07E809F06447E24E7C6F461AD3CC19F04C95C10AEC426D717870ECFBB181FC114C2D12715540E942AA1C21B27944D355481C5BF22B0379FA9C0C98D89491B8A7DF981E4F92FE0BB6386E46FDD97DA0238F6B1DD836172F4BF9129148F1A3E8206A353EEA465D675A38F2765D99AAF74B282170504914C4B225166EA16B571B557A58333B559C46976C6CFFF5A9A7D99737352E87D5A4BB86A18051D1459C076DF7957C33428D9C91CC180602999A7FE93980EA324F21F149C62F4C3BFE9DA0A3A63B2A6C1E4D07B546D811D3722C7EDEF18E58C563BE723288AD273F87451F3F7464F0C2CD2F15C74608DD7125F947CBB62792125B8A9A9B44C6AA9D3EA74EBB9D6AF548710E685FABE17CA803C448806C5262114E3285D8C28BE00834A41FD65C81A1D422F0A9F0F8E33EED101F8C38DBAEB6FD87966751FE3E9F1F69216D2DC2105E60D4433E74367AABCD73B8063520A90FE2760D3B45970C579D354DF07B363A51432FED4257AD07B5104329A4C42E09791AD78A5D7BF93155C4DC82746438288ACF254E22DA526D33C62099AC827B3AD22F9783254CBB4EF3B7C0A3E9D1F6C61A5C71BDCD3333A065CE147EDB1E344C2E1A667AF2A5F192022EE5F56A29B65644B4D5603CC3A88423E127B23869A5623D55
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/BFLYXW+ReginaBlack-Solid cguidfix
/F2.1/BFLYXW+ReginaBlack-Solid renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.47450981 0.33333334 0.28235295 sc
0.60000002 i
q
0 0 456 64 rc
1 0 0 -1 60.821301 26.216078 cm
/F1.1[ 16 0 0 -16 0 0]sf
7.7422552 18 m
(!""#$%&'\(\)*&%#+'%,+#\)-.\)/#"%#+$\)0,\(%,+)[ 10.104000 8.008000 8.328000 9.464000 10.168000 7.160000 5.224000 9.208000 5.176000 4.200000 10.072000 5.224000 7.160000 9.464000 7.528000 9.208000 7.160000 9.992000 7.208000 9.464000 4.200000 10.088000 6.360000 4.200000 16.040000 9.464000 8.328000 7.160000 9.464000 7.528000 10.168000 4.200000 12.952000 9.992000 5.176000 7.160000 9.992000 0.000000 ] xS
317.26227 18 m
(#)s
1 0 0 -1 0 64 cm
/F2.1[ 32 0 0 -32 0 0]sf
20.139555 30 m
(!"#$%&#'!$\(\)\)*)[ 26.200000 33.592000 28.440000 13.400000 31.512000 32.152000 29.240000 30.616000 26.200000 13.400000 30.520000 33.208000 33.208000 0.000000 ] xS
413.56357 30 m
(+)s
ep
end
